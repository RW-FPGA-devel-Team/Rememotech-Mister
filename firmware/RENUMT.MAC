TITLE	RENUMT	REMEMOTECH Numeric Accelerator Test

; Depends on REMEMOTECH hardware accelerator

.Z80

ASEG

;
; Version
;
@V1	EQU	1
@V2	EQU	0
;
; General equates
;
CR	EQU	13
LF	EQU	10
EOF	EQU	26
ESC	EQU	27
;
; CP/M BDOS equates
;
BDOS	EQU	0005H
CONOUT	EQU	2
PRINTF	EQU	9

;
	INCLUDE	PORTS.INC
	INCLUDE	NUMACCEL.INC

	ORG	100H

; if you type the .COM file, you see the version number
	DB	CR,LF,'*V',@V1+'0','.',@V2+'0',CR,LF,EOF

; check we running on the right kind of hardware
	LD	DE,MSGHW
	LD	A,(0FFC1H)
	CP	'R'
	JP	NZ,ERROR
	LD	A,(0FFC2H)
	CP	'E'
	JP	NZ,ERROR
	LD	A,(0FFC3H)
	CP	'M'
	JP	NZ,ERROR
; enable accelerator, if we can
	LD	DE,MSGHW2
	IN	A,(P_RIZEQ)
	RES	6,A
	OUT	(P_RIZEQ),A
	IN	A,(P_RIZEQ)
	BIT	6,A
	JP	NZ,ERROR
	SET	6,A
	OUT	(P_RIZEQ),A
	IN	A,(P_RIZEQ)
	BIT	6,A
	JP	Z,ERROR
;

MILIT	MACRO	man3,man2,man1,man0
	CALL	ILIT
	DB	man3,man2,man1,man0
	ENDM

MICHK	MACRO	man3,man2,man1,man0
	CALL	ICHK
	DB	man3,man2,man1,man0
	ENDM

MFLIT	MACRO	exp,man3,man2,man1,man0
	CALL	FLIT
	DB	exp,man3,man2,man1,man0
	ENDM

MFCHK	MACRO	exp,man3,man2,man1,man0
	CALL	FCHK
	DB	exp,man3,man2,man1,man0
	ENDM

MOP	MACRO	cmd,res
	LD	A,cmd
	LD	C,res
	CALL	OP
	ENDM

MNL	MACRO
	LD	DE,MSGNL
	CALL	OUTSTR
	ENDM

	MOP	C_INIT,R_OK		; init
	MNL

.RADIX 16

	; lit0 -> 0
	MOP	C_LIT,R_OK
	MICHK	00,00,00,0
	MNL

	; 2 -> 2
	MILIT	00,00,00,02
	MICHK	00,00,00,02
	MNL

	; 55 56 -> 56 55
	MILIT	00,00,00,55
	MILIT	00,00,00,56
	MICHK	00,00,00,56
	MICHK	00,00,00,55
	MNL

	; 3 dup -> 3 3
	MILIT	00,00,00,03
	MOP	C_DUP,R_OK
	MICHK	00,00,00,03
	MICHK	00,00,00,03
	MNL

	; 4 5 drop -> 4
	MILIT	00,00,00,04
	MILIT	00,00,00,05
	MOP	C_DROP,R_OK
	MICHK	00,00,00,04
	MNL

	; 6 7 swap -> 6 7
	MILIT	00,00,00,06
	MILIT	00,00,00,07
	MOP	C_SWAP,R_OK
	MICHK	00,00,00,06
	MICHK	00,00,00,07
	MNL

	; 8 9 over -> 8 9 8
	MILIT	00,00,00,08
	MILIT	00,00,00,09
	MOP	C_OVER,R_OK
	MICHK	00,00,00,08
	MICHK	00,00,00,09
	MICHK	00,00,00,08
	MNL

	; lit1 -> 1
	MOP	C_LIT,R_OK
	MOP	C_1,R_OK
	MICHK	00,00,00,01
	MNL

	; 10 ineg -> -10
	MILIT	00,00,00,10
	MOP	C_INEG,R_OK
	MICHK	0FF,0FF,0FF,0F0
	MNL

	; 11 inot -> ~11
	MILIT	00,00,00,11
	MOP	C_INOT,R_OK
	MICHK	0FF,0FF,0FF,0EE
	MNL

	; 12 ilsl -> 24
	MILIT	00,00,00,12
	MOP	C_ILSL,R_OK
	MICHK	00,00,00,24
	MNL

	; 13 ilsr -> 09
	MILIT	00,00,00,13
	MOP	C_ILSR,R_OK
	MICHK	00,00,00,09
	MNL

	; FF000000 ilsr -> 7F800000
	MILIT	0FF,00,00,00
	MOP	C_ILSR,R_OK
	MICHK	7F,80,00,00
	MNL

	; 14 alsr -> 0A
	MILIT	00,00,00,14
	MOP	C_IASR,R_OK
	MICHK	00,00,00,0A
	MNL

	; FF000000 alsr -> FF800000
	MILIT	0FF,00,00,00
	MOP	C_IASR,R_OK
	MICHK	0FF,80,00,00
	MNL

	; 12345678 iabs -> 12345678
	MILIT	12,34,56,78
	MOP	C_IABS,R_OK
	MICHK	12,34,56,78
	MNL

	; -22334455 iabs -> 22334455
	MILIT	0DD,0CC,0BB,0AB
	MOP	C_IABS,R_OK
	MICHK	22,33,44,55
	MNL

	; 12345678 isgn -> 1
	MILIT	12,13,56,78
	MOP	C_ISGN,R_OK
	MICHK	00,00,00,01
	MNL

	; -22334455 isgn -> -1
	MILIT	0DD,0CC,0BB,0AB
	MOP	C_ISGN,R_OK
	MICHK	0FF,0FF,0FF,0FF
	MNL

	; 0 isgn -> 0
	MILIT	00,00,00,00
	MOP	C_ISGN,R_OK
	MICHK	00,00,00,00
	MNL

	; 20 21 iadd -> 41
	MILIT	00,00,00,20
	MILIT	00,00,00,21
	MOP	C_IADD,R_OK
	MICHK	00,00,00,41
	MNL

	; 50 34 isub -> 1C
	MILIT	00,00,00,50
	MILIT	00,00,00,34
	MOP	C_ISUB,R_OK
	MICHK	00,00,00,1C
	MNL

	; 45 67 umul -> 1BC3
	MILIT	00,00,00,45
	MILIT	00,00,00,67
	MOP	C_UMUL,R_OK
	MICHK	00,00,1B,0C3
	MNL

	; C1234567 88888888 umul -> EE5396B8 6701BE9C
	MILIT	0C1,23,45,67
	MILIT	88,88,88,88
	MOP	C_UMUL,R_OK
	MICHK	0EE,53,96,0B8
	MOP	C_HMUL,R_OK
	MICHK	67,01,0BE,9C
	MNL

	; C1234567 88888888 smul -> EE5396B8 1D55F0AD
	MILIT	0C1,23,45,67
	MILIT	88,88,88,88
	MOP	C_SMUL,R_OK
	MICHK	0EE,53,96,0B8
	MOP	C_HMUL,R_OK
	MICHK	1D,55,0F0,0AD
	MNL

	; 0D223344 34 udiv -> 40A85E
	MILIT	0D,22,33,44
	MILIT	00,00,00,34
	MOP	C_UDIV,R_OK
	MICHK	00,40,0A8,5E
	MNL

	; FF554433 34 udiv -> 4E9063C
	MILIT	0FF,55,44,33
	MILIT	00,00,00,34
	MOP	C_UDIV,R_OK
	MICHK	04,0E9,06,3C
	MNL

	; 1 0 udiv
	MILIT	00,00,00,01
	MILIT	00,00,00,00
	MOP	C_UDIV,R_DIV0
	MOP	C_INIT,R_OK
	MNL

	; FF554433 34 sdiv -> FFFCB778
	MILIT	0FF,55,44,33
	MILIT	00,00,00,34
	MOP	C_SDIV,R_OK
	MICHK	0FF,0FC,0B7,78
	MNL

	; 1 0 sdiv
	MILIT	00,00,00,01
	MILIT	00,00,00,00
	MOP	C_SDIV,R_DIV0
	MOP	C_INIT,R_OK
	MNL

	; 99999999 77 umod -> 22
	MILIT	99,99,99,99
	MILIT	00,00,00,77
	MOP	C_UMOD,R_OK
	MICHK	00,00,00,22
	MNL

	; 112233 4455 umod -> CF3
	MILIT	00,11,22,33
	MILIT	00,00,44,55
	MOP	C_UMOD,R_OK
	MICHK	00,00,0C,0F3
	MNL

	; 1 0 umod
	MILIT	00,00,00,01
	MILIT	00,00,00,00
	MOP	C_UMOD,R_DIV0
	MOP	C_INIT,R_OK
	MNL

	; 11 4 smod -> 1
	MILIT	00,00,00,11
	MILIT	00,00,00,04
	MOP	C_SMOD,R_OK
	MICHK	00,00,00,01
	MNL

	; -11 4 smod -> -1
	MILIT	0FF,0FF,0FF,0EF
	MILIT	00,00,00,04
	MOP	C_SMOD,R_OK
	MICHK	0FF,0FF,0FF,0FF
	MNL

	; 11 -4 smod -> 1
	MILIT	00,00,00,11
	MILIT	0FF,0FF,0FF,0FC
	MOP	C_SMOD,R_OK
	MICHK	00,00,00,01
	MNL

	; -11 -4 smod -> -1
	MILIT	0FF,0FF,0FF,0EF
	MILIT	0FF,0FF,0FF,0FC
	MOP	C_SMOD,R_OK
	MICHK	0FF,0FF,0FF,0FF
	MNL

	; 1 0 smod
	MILIT	00,00,00,01
	MILIT	00,00,00,00
	MOP	C_SMOD,R_DIV0
	MOP	C_INIT,R_OK
	MNL

	; 0.0 fneg -> 0.0
	MFLIT	00,00,00,00,00
	MOP	C_FNEG,R_OK
	MFCHK	00,00,00,00,00
	MNL

	; 1.0 fneg -> -1.0
	MFLIT	81,00,00,00,00
	MOP	C_FNEG,R_OK
	MFCHK	81,80,00,00,00
	MNL

	; 1.0 fabs -> 1.0
	MFLIT	81,00,00,00,00
	MOP	C_FABS,R_OK
	MFCHK	81,00,00,00,00
	MNL

	; -1.0 fabs -> 1.0
	MFLIT	81,80,00,00,00
	MOP	C_FABS,R_OK
	MFCHK	81,00,00,00,00
	MNL

	; 3.0 fsgn -> 1.0
	MFLIT	82,40,00,00,00
	MOP	C_FSGN,R_OK
	MFCHK	81,00,00,00,00
	MNL

	; -3.0 fsgn -> -1.0
	MFLIT	82,0C0,00,00,00
	MOP	C_FSGN,R_OK
	MFCHK	81,80,00,00,00
	MNL

	; 0.0 fsgn -> -1.0
	MFLIT	00,00,00,00,00
	MOP	C_FSGN,R_OK
	MFCHK	00,00,00,00,00
	MNL

	; 0.0 fint -> 0.0
	MFLIT	00,00,00,00,00
	MOP	C_FINT,R_OK
	MFCHK	00,00,00,00,00
	MNL

	; 1.5 fint -> 1.0
	MFLIT	81,40,00,00,00
	MOP	C_FINT,R_OK
	MFCHK	81,00,00,00,00
	MNL

	; x.y fint -> x
	MFLIT	87,7F,0FF,0FF,0FF
	MOP	C_FINT,R_OK
	MFCHK	87,7E,00,00,00
	MNL

	; big fint -> big
	MFLIT	0B0,7F,0FF,0FF,0FF
	MOP	C_FINT,R_OK
	MFCHK	0B0,7F,0FF,0FF,0FF
	MNL

	; 2.0 3.0 fadd -> 5.0
	MFLIT	82,00,00,00,00
	MFLIT	82,40,00,00,00
	MOP	C_FADD,R_OK
	MFCHK	83,20,00,00,00
	MNL

	; 2.5 -2.5 fadd -> 0.0
	MFLIT	82,40,00,00,00
	MFLIT	82,0C0,00,00,00
	MOP	C_FADD,R_OK
	MFCHK	00,00,00,00,00
	MNL

	; 10.0 4.0 fsub -> 6.0
	MFLIT	84,20,00,00,00		; 1.01 x 2^3
	MFLIT	83,00,00,00,00		; 1.0  x 2^2
	MOP	C_FSUB,R_OK
	MFCHK	83,40,00,00,00		; 1.1  x 2^2
	MNL

	; big big fadd
	MFLIT	0FF,0FF,0FF,0FF,0FF
	MFLIT	0FF,0FF,0FF,0FF,0FF
	MOP	C_FADD,R_OVER
	MOP	C_INIT,R_OK
	MNL

	; small smaller fsub
	MFLIT	01,0FF,00,00,00
	MFLIT	01,0F0,00,00,00
	MOP	C_FSUB,R_UNDR
	MOP	C_INIT,R_OK
	MNL

	; 4.0 0.0 fmul -> 0.0
	MFLIT	83,00,00,00,00
	MFLIT	00,00,00,00,00
	MOP	C_FMUL,R_OK
	MFCHK	00,00,00,00,00
	MNL

	; 4.0 5.0 fmul -> 20.0
	MFLIT	83,00,00,00,00		; 1.00 x 2^2
	MFLIT	83,20,00,00,00		; 1.01 x 2^2
	MOP	C_FMUL,R_OK
	MFCHK	85,20,00,00,00		; 1.0100 x 2^4
	MNL

	; 5.0 7.0 fmul -> 35.0
	MFLIT	83,20,00,00,00		; 1.01 x 2^2
	MFLIT	83,60,00,00,00		; 1.11 x 2^2
	MOP	C_FMUL,R_OK
	MFCHK	86,0C,00,00,00		; 1.00011 x 2^5
	MNL

	; big big fmul
	MFLIT	0FF,12,00,00,00
	MFLIT	0FF,34,00,00,00
	MOP	C_FMUL,R_OVER
	MOP	C_INIT,R_OK
	MNL

	; small small fmul
	MFLIT	01,12,00,00,00
	MFLIT	01,34,00,00,00
	MOP	C_FMUL,R_UNDR
	MOP	C_INIT,R_OK
	MNL

	; 1.0 3.0 fdiv -> 0.3333
	MFLIT	81,00,00,00,00		; 1.0 x 2^0
	MFLIT	82,40,00,00,00		; 1.1  x 2^1
	MOP	C_FDIV,R_OK
	MFCHK	7F,02A,0AA,0AA,0AB	; 1.010101 x 2^-2
	MNL

	; 0.3333 3.0 fmul -> 1.0
	MFLIT	7F,02A,0AA,0AA,0AB	; 1.010101 x 2^-2
	MFLIT	82,40,00,00,00		; 1.1  x 2^1
	MOP	C_FMUL,R_OK
	MFCHK	81,00,00,00,00		; 1.0 x 2^0
	MNL

	; 0.0 1.0 fdiv -> 0.0
	MFLIT	00,00,00,00,00
	MFLIT	81,00,00,00,00
	MOP	C_FDIV,R_OK
	MFCHK	00,00,00,00,00
	MNL

	; 1.0 0.0 fdiv
	MFLIT	81,00,00,00,00
	MFLIT	00,00,00,00,00
	MOP	C_FDIV,R_DIV0
	MOP	C_INIT,R_OK
	MNL

	; 0 utof -> 0.0
	MILIT	00,00,00,00
	MOP	C_UTOF,R_OK
	MFCHK	00,00,00,00,00
	MNL

	; 123 utof -> 123.0
	MILIT	00,00,01,23
	MOP	C_UTOF,R_OK
	MFCHK	89,11,80,00,00
	MNL

	; FFFFFFFF utof -> FFFFFFFF.0
	MILIT	0FF,0FF,0FF,0FF
	MOP	C_UTOF,R_OK
	MFCHK	0A0,07F,0FF,0FF,0FF
	MNL

	; 0.0 ftou -> 0
	MFLIT	00,00,00,00,00
	MOP	C_FTOU,R_OK
	MICHK	00,00,00,00
	MNL

	; 123.0 ftou -> 123
	MFLIT	89,11,80,00,00
	MOP	C_FTOU,R_OK
	MICHK	00,00,01,23
	MNL

	; FFFFFFFF.0 ftou -> FFFFFFFF
	MFLIT	0A0,07F,0FF,0FF,0FF
	MOP	C_FTOU,R_OK
	MICHK	0FF,0FF,0FF,0FF
	MNL

	; small ftou -> 0
	MFLIT	080,07F,0FF,0FF,0FF
	MOP	C_FTOU,R_OK
	MICHK	00,00,00,00
	MNL

	; large ftou -> 0
	MFLIT	0A1,07F,0FF,0FF,0FF
	MOP	C_FTOU,R_OVER
	MOP	C_INIT,R_OK
	MNL

.RADIX 10

	LD	DE,MSGOK
	CALL	OUTSTR
	RST	0

;
ILIT::
	LD	A,C_LIT
	LD	C,R_OK
	CALL	OP
;
	POP	HL
	LD	A,0
	OUT	(P_EXP),A
	LD	A,(HL)
	INC	HL
	CALL	OUTBYT
	OUT	(P_MAN3),A
	LD	A,(HL)
	INC	HL
	CALL	OUTBYT
	OUT	(P_MAN2),A
	LD	A,(HL)
	INC	HL
	CALL	OUTBYT
	OUT	(P_MAN1),A
	LD	A,(HL)
	INC	HL
	CALL	OUTBYT
	OUT	(P_MAN0),A
	PUSH	HL
;
;	call	dump
	LD	A,' '
	CALL	OUTCHR
	RET

;
ICHK::
	LD	A,19
	CALL	OUTCHR
;
	POP	HL
	IN	A,(P_EXP)
	CP	0
	JR	NZ,ICHK2
	IN	A,(P_MAN3)
	CALL	OUTBYT
	CP	(HL)
	JR	NZ,ICHK2
	INC	HL
	IN	A,(P_MAN2)
	CALL	OUTBYT
	CP	(HL)
	JR	NZ,ICHK2
	INC	HL
	IN	A,(P_MAN1)
	CALL	OUTBYT
	CP	(HL)
	JR	NZ,ICHK2
	INC	HL
	IN	A,(P_MAN0)
	CALL	OUTBYT
	CP	(HL)
	JR	NZ,ICHK2
	INC	HL
	PUSH	HL
;
	LD	A,22
	CALL	OUTCHR
	LD	A,' '
	CALL	OUTCHR
;
	LD	A,C_DROP
	LD	C,R_OK
	CALL	OP
;
	RET
;
ICHK2:
	call	dump
	LD	DE,MSGVAL
	JP	ERROR
;
FLIT::
	LD	A,C_LIT
	LD	C,R_OK
	CALL	OP
;
	POP	HL
	LD	A,(HL)
	INC	HL
	CALL	OUTBYT
	OUT	(P_EXP),A
	LD	A,(HL)
	INC	HL
	CALL	OUTBYT
	OUT	(P_MAN3),A
	LD	A,(HL)
	INC	HL
	CALL	OUTBYT
	OUT	(P_MAN2),A
	LD	A,(HL)
	INC	HL
	CALL	OUTBYT
	OUT	(P_MAN1),A
	LD	A,(HL)
	INC	HL
	CALL	OUTBYT
	OUT	(P_MAN0),A
	PUSH	HL
;
;	call	dump
	LD	A,' '
	CALL	OUTCHR
	RET

;
FCHK::
	LD	A,19
	CALL	OUTCHR
;
	POP	HL
	IN	A,(P_EXP)
	CALL	OUTBYT
	CP	(HL)
	JR	NZ,ICHK2
	INC	HL
	IN	A,(P_MAN3)
	CALL	OUTBYT
	CP	(HL)
	JR	NZ,FCHK2
	INC	HL
	IN	A,(P_MAN2)
	CALL	OUTBYT
	CP	(HL)
	JR	NZ,FCHK2
	INC	HL
	IN	A,(P_MAN1)
	CALL	OUTBYT
	CP	(HL)
	JR	NZ,FCHK2
	INC	HL
	IN	A,(P_MAN0)
	CALL	OUTBYT
	CP	(HL)
	JR	NZ,FCHK2
	INC	HL
	PUSH	HL
;
	LD	A,22
	CALL	OUTCHR
	LD	A,' '
	CALL	OUTCHR
;
	LD	A,C_DROP
	LD	C,R_OK
	CALL	OP
;
	RET
;
FCHK2:
	call	dump
	LD	DE,MSGVAL
	JP	ERROR

;
OP::	PUSH	AF
	LD	HL,OPNAM
	LD	DE,6
OP2:	CP	(HL)
	JR	Z,OP4
	ADD	HL,DE
	JR	OP2
;
OP4:	INC	HL
	EX	DE,HL
	CALL	OUTSTR
	POP	AF
	CALL	OPQ
	LD	A,' '
	JP	OUTCHR

;
OPQ::
	OUT	(P_NCMD),A
OPQ2:	IN	A,(P_NRES)
	CP	R_BUSY
	JR	Z,OPQ2
;	call	dump
	CP	C
	RET	Z
	call	dump
	LD	DE,MSGRES
	JP	ERROR

DUMP:	PUSH	AF
	PUSH	BC
	PUSH	DE
	PUSH	HL
	LD	A,20
	CALL	OUTCHR
	LD	A,'['
	CALL	OUTCHR
	IN	A,(P_MAN3)
	CALL	OUTBYT
	IN	A,(P_MAN2)
	CALL	OUTBYT
	IN	A,(P_MAN1)
	CALL	OUTBYT
	IN	A,(P_MAN0)
	CALL	OUTBYT
	LD	A,'^'
	CALL	OUTCHR
	IN	A,(P_EXP)
	CALL	OUTBYT
	LD	A,','
	CALL	OUTCHR
	IN	A,(P_NRES)
	CALL	OUTBYT
	LD	A,']'
	CALL	OUTCHR
	LD	A,22
	CALL	OUTCHR
	POP	HL
	POP	DE
	POP	BC
	POP	AF
	RET

;
OUTBYT::
	PUSH	AF
	SRL	A
	SRL	A
	SRL	A
	SRL	A
	CALL	OUTNIB
	POP	AF
	PUSH	AF
	AND	00FH
	CALL	OUTNIB
	POP	AF
	RET
;
OUTNIB::
	CP	10
	JR	NC,OUTNI2
	ADD	A,'0'
	JR	OUTNI4
OUTNI2:	ADD	A,-10+'A'
OUTNI4:	; fall

;
OUTCHR::
	PUSH	HL
	PUSH	DE
	PUSH	BC
	LD	C,CONOUT
	LD	E,A
	CALL	BDOS
	POP	BC
	POP	DE
	POP	HL
	RET

;
OUTSTR::
	PUSH	HL
	PUSH	DE
	PUSH	BC
	LD	C,PRINTF
	CALL	BDOS
	POP	BC
	POP	DE
	POP	HL
	RET

;
; Operation names
;
OPNAM:	DB	C_INIT,'init$'
	DB	C_LIT,'lit$',0
	DB	C_DUP,'dup$',0
	DB	C_DROP,'drop$'
	DB	C_SWAP,'swap$'
	DB	C_OVER,'over$'
	DB	C_1,'1$',0,0,0
	DB	C_INEG,'ineg$'
	DB	C_INOT,'inot$'
	DB	C_ILSL,'ilsl$'
	DB	C_ILSR,'ilsr$'
	DB	C_IASR,'iasr$'
	DB	C_IABS,'iabs$'
	DB	C_ISGN,'isgn$'
	DB	C_IADD,'iadd$'
	DB	C_ISUB,'isub$'
	DB	C_UMUL,'umul$'
	DB	C_SMUL,'smul$'
	DB	C_UDIV,'udiv$'
	DB	C_SDIV,'sdiv$'
	DB	C_UMOD,'umod$'
	DB	C_SMOD,'smod$'
	DB	C_HMUL,'hmul$'
	DB	C_1P0,'1.0$',0
	DB	C_2P0,'2.0$',0
	DB	C_10P0,'10.0$'
	DB	C_FNEG,'fneg$'
	DB	C_FABS,'fabs$'
	DB	C_FSGN,'fsgn$'
	DB	C_FINT,'fint$'
	DB	C_FADD,'fadd$'
	DB	C_FSUB,'fsub$'
	DB	C_FMUL,'fmul$'
	DB	C_FDIV,'fdiv$'
	DB	C_UTOF,'utof$'
	DB	C_FTOU,'ftou$'

;
; Display error at DE and exit
;
ERROR::
	LD	C,PRINTF
	CALL	BDOS
	RST	0

;
; Error messages
;
MSGHW:	DB	23,'This program only works on REMEMOTECH',22,CR,LF,'$'
MSGHW2:	DB	23,'This program only works on REMEMOTECH with Accelerator support',22,CR,LF,'$'
MSGRES:	DB	' ',23,'wrong result',22,CR,LF,'$'
MSGVAL:	DB	' ',23,'wrong value',22,CR,LF,'$'
MSGNL:	DB	CR,LF,'$'
MSGOK:	DB	23,'All tests passed',22,CR,LF,'$'

END
