;
;Decent keyboard routine used by SDX
;
; Special version for REMEMOTECH or REMEMOrizer
; Modified Feb 2012, A.Key
; It uses debounce values suitable for the current CPU speed
;
.Z80
ASEG
;
	ORG	100H+0F000H-0E000H
;

FALSE	EQU	0
TRUE	EQU	NOT(FALSE)

VARDEL	EQU	TRUE

.PHASE 0F000H

ASDXKBD::	; ROM SIZING

LASTDR:	DB 0
LASTASC:DB 0
LASTKY: DB 0
KBFLAG: DB 0
AUTOCT:	DB 0,0
CTYSLT:	DB 0


PUBLIC BASE
PUBLIC KBDIN
PUBLIC KBDSTS
;
;
SENSE1 EQU 5
SENSE2 EQU 6
DR EQU 5

;******************************
SHIF::	LD A,191
	LD (LASTDR),A
	OUT (DR),A ;Z IMPLIES }SHIFT
	IN A,(DR)
	BIT 6,A
	RET Z
	BIT 0,A
	RET
KBDIN:	
	LD (SAVESP),SP
      	LD SP,KBDq
        PUSH BC
KBDIN2: LD B,3
KBDIN3:	CALL KBDq
	JR Z,KBDIN2
          LD A,(LASTKY)
	LD C,A
KBDIN4:   CALL KBDq
          LD A,(LASTKY)
          CP C
          JR NZ,KBDIN2
          DJNZ KBDIN4
          LD A,(LASTASC)
	POP BC
	LD SP,(SAVESP)
	RET
KBDSTS:
	LD (SAVESP),SP
	LD SP,KBDq
	CALL KBDq
	LD A,0
	JR Z,KBSTEND
	LD (LASTKY),A
	DEC A
KBSTEND:LD SP,(SAVESP)
	RET


SAVESP: DS 2
KBDSTK: DS 32

KBDq:	PUSH	HL
	PUSH	BC
	PUSH DE

AUTORP:	LD HL,AUTOCT

	LD D,(HL)
	INC HL
	LD E,(HL)
	BIT 7,D			; changed for REEMOTECH
				; original jumps to ENDAUT if D=088H
	JR NZ,ENDAUT		; previously there was no key
	LD A,D
	OR E
	JR Z,ZERO		; at zero, so cause fake release
	DEC DE
	LD (hl),E
	DEC HL
	LD (HL),D
     LD A,D
     OR E
	JR NZ,ENDAUT		; if get to zero, fall through to cause fake release

ZERO:	LD (LASTKY),A

ENDAUT:

	CALL START
	JR NZ,KBDEX
	LD A,0
KBDEX:	POP	DE
	POP BC
	POP HL
	RET		

KEY1::
START:	LD A,251
	LD (LASTDR),A
	OUT (DR),A
	IN A,(DR)
	BIT 0,A
	JR Z,CNTRL
	CALL KBNORMAL
	RET
CNTRL:	CALL 	KBNORMAL
	RET Z
	AND 1FH
	LD (LASTASC),A
	RET	
KBNORMAL:	CALL SHIF
	JR Z,NSHIFT ;NORMAL SHIFT
	CALL SCAN
	RET Z
	LD D,A
	LD BC,BASE
	CALL LOOK
	LD B,A
	CP 127
	JR Z,KB8
	CP 32
	CCF
KB8:	LD A,(KBFLAG)
	JR C,KBN999
	BIT 2,A
	JR NZ,NSH1
KBN999:	BIT 7,A
	LD A,B
	JR Z,NCONT
;
	LD HL,ALPHA		;3
	LD E,D			;1
	LD D,0			;2
	ADD HL,DE		;1
	LD A,(HL)		;1
	LD D,E			;1
	AND A			;1
	LD A,B			;1
	JR NZ,NORM1		;2	;RETURN WITH LOWER-CASE IFF ALPHA=1
;					;(CHECK FOR CHARS 160 AND 29
NSH1:	LD A,D
	JR NSH2	
NSHIFT:	CALL SCAN
	RET Z
NSH2:	LD BC,UPPER
	CALL LOOK
NCONT:	LD B,A
NORM1:	CP 160
	JR NZ,NORM2
NORM11:	LD A,(KBFLAG) ;GET FLAGS
	XOR 80H
	LD (KBFLAG),A
	XOR A
	RET
NORM2:	CP 29	;28 =SCROLL/PAGE
	RET NZ ;NORMAL CHAR
	LD E,A ;save 28
	LD A,(KBFLAG)
	BIT 5,A
	JR Z,NORM3
	DEC E
NORM3:	XOR 32
	LD (KBFLAG),A
NORM4:	LD A,E
	LD (LASTASC),A
	AND A
	RET
;MATRIX SCAN
SCAN:	LD B,8 ;B=8=DRIVE COUNTER 
	xor a	;a=0 reset carry
	ld c,a ;SENSE COUNTER=0
	dec a	;a=ff
SCAN2:	RLA ;A=FE,FD,FB,F7,EF,DF,BF,7F
	PUSH AF ;SAVE DRIVE
	LD (LASTDR),A
	OUT (DR),A
	IN A,(SENSE1)
	CP 0FFH ;IF FF THEN NO SENSE.TRY OTHER DRIVE
	JR Z,SCAN3
CHECK1:	PUSH AF ;SAVE SENSE
CH10:	LD A,2 ;CHECK FOR SHIFT
	CP B	;IF B=2 THEN RESET SHIFTS
	JR NZ,CH11
	POP AF
	SET 6,A
	JR CH13
CH11:	LD A,6 ;CHECK FOR CNTRL
	CP B
	JR Z,CH12
	POP AF
	JR VALID
CH12:	POP AF ;RESTORE SENSE
CH13:	SET 0,A ;RESET ALPHA,SHIFT AND CONTROL
CH14:	CP 0FFH ;TRY AGAIN AFTER ELIMINATING ODD KEYS
	JR Z,SCAN3 ;IF STILL 0 THEN TRY OTHER DRIVE
;VALID KEY FOUND
VALID:	POP DE ;REMOVE DRIVE
	LD C,0
CH15:	RRCA
	JR NC,ENDSCAN ;B=1-8,C=0-7
	INC C
	JR CH15
SCAN3:	IN A,(SENSE2) ;SECOND DRIVE
	AND 03
	CP 3
	JR Z,SCAN4
CHECK2:	AND A
	ADD A,7
	LD C,A ;C=8 OR 9
	POP AF
	
JR ENDSCAN
SCAN4:	POP AF ;RESTORE DRIVE
	DJNZ SCAN2 ;MOVE TO NEXT DRIVE
	LD C,0
ENDSCAN:	LD A,C
	ADD A,A
	ADD A,A
	ADD A,A
	ADD A,B
	LD HL,AUTOCT
	JR NZ,DEB1
	PUSH AF			; changed for REMEMOTECH

	IFT VARDEL
	PUSH HL
	PUSH DE
	IN A,(0D8H)		; 25MHz master clock divider-1, 0 to 7
	LD HL,DELTAB
	LD E,A
	LD D,0
	ADD HL,DE
	LD A,(HL)
	POP DE
	POP HL
	ELSE
	LD A,088H
	ENDIF

	LD (HL),A
	POP AF
	INC HL
	LD (HL),0
	DEC HL
	JR Z,DEB2
DEB1:	RES 7,(HL)		; key => set to 00800H
	LD B,A
	LD A,(LASTKY)
	CP B
	LD A,B
DEB2:	LD (LASTKY),A
	RET Z
	PUSH AF
	XOR A
	CP (HL)
	JR NZ,ENDATO
FAST:	SET 1,(HL)		; repeat quickly => set to 00200H
ENDATO:	POP AF
	RET

	IFT VARDEL
; REMEMOTECH runs at different clock speeds
; we need to compute the debounce value based upon this
DELTAB:	DB 080H+48		; 25/1 = 25.000MHz
	DB 080H+24		; 25/2 = 12.500MHz
	DB 080H+16		; 25/3 =  8.333MHz
	DB 080H+12		; 25/4 =  6.250MHz
	DB 080H+10		; 25/5 =  5.000MHz
	DB 080H+8		; 25/6 =  4.166MHz, per normal 4MHz FDX/SDX
	DB 080H+7		; 25/7 =  3.571MHz
	DB 080H+6		; 25/8 =  3.125MHz
	ENDIF
;
LOOK:	LD H,0 ;LOOK UP IN TABLE SPECIFIED BY BC
	LD L,A
	ADD HL,BC
	LD A,(HL)
	LD (LASTASC),A
	RET
;******************************************************************************
;*****	WARNING...............THE POSITION OF THESE TABLES MUST NOT CHANGE			
;******************************************************************************
BASE:	DB 00
DB 122,0,97,160,113,0,27,49
DB 99,120,100,115,101,119,50,51
DB 98,118,103,102,116,114,52,53
DB 109,110,106,104,117,121,54,55
DB 46,44,108,107,111,105,56,57 
DB 95,47,58,59,64,112,48,45
DB 21,0,13,93,10,91,94,92
DB 12,10,26,25,8,11,5,29
;
;DB 134,135,132,133,131,130,129,128	;f4,f8,f3,f7,f6,f2,f5,f1
DB 131,135,130,134,133,129,132,128
;
DB 32,0,0,0,127,9,8,3
UPPER:	DB 0
DB 90,0,65,160,81,0,27,33
DB 67,88,68,83,69,87,34,35
DB 66,86,71,70,84,82,36,37
DB 77,78,74,72,85,89,38,39
DB 62,60,76,75,79,73,40,41
DB 95,63,42,43,96,80,48,61
DB 48,0,13,125,10,123,126,124
DB 13,46,50,51,49,53,56,55
;
;DB 142,143,140,141,139,138,137,136	
DB 139,143,138,142,141,137,140,136	;f4,f8,f3,f7,f6,f2,f5,f1
;
DB 32,0,0,0,54,52,8,57
;
;
ALPHA:	DB	1
	DB	0,1,0,1,0,1,1,1
	DB	0,0,0,0,0,0,1,1
	DB	0,0,0,0,0,0,1,1
	DB	0,0,0,0,0,0,1,1
	DB	1,1,0,0,0,0,1,1
	DB	1,1,1,1,1,0,1,1
	DB	1,1,1,1,1,1,1,1
	DB	1,1,1,1,1,1,1,1
	DB	1,1,1,1,1,1,1,1
	DB	1,1,1,1,1,1,1,1

EASDXKBD::	; ROM SIZING
;
.DEPHASE
;
;
;
END
